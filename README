Here's the Ultimate SoC Boot Cheat Sheet

Different chip vendors name their bootloaders differently - but the job is the same: get your OS up and running safely and securely.

Here's a quick cheat sheet

⚫ Qualcomm:

ROM → PBL SBL/XBL → ABL → Kernel

⚫ NXP / TI (like i.MX & Sitara):

ROM → SPL → U-Boot → Kernel

⚫ STM32MP1:

BootROM → FSBL (TF-A) → SSBL (U-Boot) → Kernel

⚫ Broadcom (Raspberry Pi):

ROM → bootcode.bin → start.elf → Kernel

⚫ Samsung (Exynos):

BL1 (ROM) → BL2 → BL3 (TF-A/U-Boot) → Kernel

⚫ Nvidia (Jetson):

ROM → MB1 → MB2 / UEFI /CBoot → Kernel

Core Idea:

All SoCs follow a multi-stage boot-just different names.

First, a tiny ROM checks and loads a secure loader → which sets up memory

and finally loads your OS.

If you're working on embedded Linux, Yocto, or custom boards, understanding these terms is critical.

Linux kernel
============

There are several guides for kernel developers and users. These guides can
be rendered in a number of formats, like HTML and PDF. Please read
Documentation/admin-guide/README.rst first.

In order to build the documentation, use ``make htmldocs`` or
``make pdfdocs``.  The formatted documentation can also be read online at:

    https://www.kernel.org/doc/html/latest/

There are various text files in the Documentation/ subdirectory,
several of them using the reStructuredText markup notation.

Please read the Documentation/process/changes.rst file, as it contains the
requirements for building and running the kernel, and information about
the problems which may result by upgrading your kernel.
